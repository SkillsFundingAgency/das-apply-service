@using SFA.DAS.ApplyService.Application.Apply.Roatp
@model SFA.DAS.ApplyService.Web.ViewModels.Roatp.TaskListViewModel

@{
    ViewBag.Title = "Application overview";
    Layout = "_Layout";

}

@{ await Html.RenderPartialAsync("~/Views/Roatp/ApplicationHeader.cshtml"); }



<main class="govuk-main-wrapper " id="main-content" role="main">
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <h1 class="govuk-heading-xl">Application overview</h1>
            <dl class="govuk-summary-list govuk-summary-list--min-width-590 govuk-!-margin-bottom-9">
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key das-no-wrap">
                        Organisation name
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @Model.OrganisationName
                    </dd>
                    <dd class="govuk-summary-list__actions">
                    </dd>
                </div>
                @if (!String.IsNullOrWhiteSpace(Model.TradingName))
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key das-no-wrap">
                            Trading name
                        </dt>
                        <dd class="govuk-summary-list__value">
                            @Model.TradingName
                        </dd>
                        <dd class="govuk-summary-list__actions">
                        </dd>
                    </div>
                }
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key das-no-wrap">
                        UKPRN
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @Model.UKPRN
                    </dd>
                    <dd class="govuk-summary-list__actions">
                        <a class="govuk-link" href="@Url.Action("ChangeUkprn", "RoatpApplicationPreamble", new { applicationId = Model.ApplicationId })">
                            Change<span class="govuk-visually-hidden"> UKPRN</span>
                        </a>
                    </dd>
                </div>
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Provider route
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @Model.ApplicationRouteShortText
                    </dd>
                    <dd class="govuk-summary-list__actions">
                        <a class="govuk-link" href="@Url.Action("ConfirmChangeRoute","RoatpApplicationPreamble", new { applicationId = Model.ApplicationId })">
                            Change<span class="govuk-visually-hidden"> provider route</span>
                        </a>
                    </dd>
                </div>
            </dl>
        </div>
    </div>
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <ol class="app-task-list">
                @{
                    await Html.RenderPartialAsync("~/Views/Roatp/TaskList/YourOrganisationSequence.cshtml", Model);
                }
                @foreach (var applicationSequence in Model.ApplicationSequences.Where(sequence => !sequence.Sequential && sequence.SequenceId < RoatpWorkflowSequenceIds.DeliveringApprenticeshipTraining).OrderBy(seq => seq.SequenceId))
                {
                    <li>
                        <h2 class="app-task-list__section">
                            @Html.Raw(Convert.ToInt32(applicationSequence.SequenceId)). @Html.Raw(applicationSequence.Description)
                        </h2>
                        <ul class="app-task-list__items">
                            @foreach (var section in applicationSequence.Sections.OrderBy(sec => sec.SectionId))
                            {
                                var sequenceSection = section.SequenceId + "_" + section.SectionId;
                                @if (!Model.IntroductionPageNextSectionUnavailable(section.SequenceId, section.SectionId) && Model.SectionStatus(section.SequenceId, section.SectionId).ToLower() != "not required")
                                {
                                    <li class="app-task-list__item">
                                        <span class="app-task-list__task-name">
                                            <a class="govuk-link" href="@Url.Action("Section", "RoatpApplication", new {section.ApplicationId, section.SequenceId, section.SectionId})">
                                                @Html.Raw(section.Title)
                                            </a>
                                        </span>
                                        <strong class="govuk-tag app-task-list__task-@Model.CssClass(section.SequenceId, section.SectionId)" id="status_@sequenceSection"> @Model.SectionStatus(section.SequenceId, section.SectionId)</strong>
                                    </li>
                                }
                                else
                                {
                                    <li class="app-task-list__item">
                                        <span class="app-task-list__task-name">
                                            @Html.Raw(section.Title)
                                        </span>
                                        @if (Model.SectionStatus(section.SequenceId, section.SectionId).ToLower() == "not required")
                                        {
                                            <strong class="govuk-tag app-task-list__task-@Model.CssClass(section.SequenceId, section.SectionId)" id="status_@sequenceSection"> @Model.SectionStatus(section.SequenceId, section.SectionId)</strong>

                                        }
                                    </li>

                                }
                            }
                        </ul>
                    </li>
                }
                @{
                    await Html.RenderPartialAsync("~/Views/Roatp/TaskList/DeliveringAppTrainingSequence.cshtml", Model);


                    var evaluationSequence = Model.ApplicationSequences.First(sequence => sequence.SequenceId == RoatpWorkflowSequenceIds.EvaluatingApprenticeshipTraining);

                        <li>
                            <h2 class="app-task-list__section">
                                <span class="app-task-list__section-number">@Html.Raw(Convert.ToInt32(evaluationSequence.SequenceId)). </span>@Html.Raw(evaluationSequence.Description)
                            </h2>
                            <ul class="app-task-list__items">
                                @foreach (var section in evaluationSequence.Sections.OrderBy(sec => sec.SectionId))
                                {

                                    var sequenceSection = section.SequenceId + "_" + section.SectionId;

                                    @if (!Model.IntroductionPageNextSectionUnavailable(section.SequenceId, section.SectionId) && Model.SectionStatus(section.SequenceId, section.SectionId).ToLower() != "not required")
                                    {
                                        <li class="app-task-list__item">
                                            <span class="app-task-list__task-name">
                                                <a class="govuk-link" href="@Url.Action("Section", "RoatpApplication", new {section.ApplicationId, section.SequenceId, section.SectionId})">
                                                    @Html.Raw(section.Title)
                                                </a>
                                            </span>
                                            <strong class="govuk-tag app-task-list__task-@Model.CssClass(section.SequenceId, section.SectionId)" id="status_@sequenceSection"> @Model.SectionStatus(section.SequenceId, section.SectionId)</strong>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="app-task-list__item">
                                            <span class="app-task-list__task-name">
                                                @Html.Raw(section.Title)
                                            </span>
                                            @if (Model.SectionStatus(section.SequenceId, section.SectionId).ToLower() == "not required")
                                            {
                                                <strong class="govuk-tag app-task-list__task-@Model.CssClass(section.SequenceId, section.SectionId)" id="status_@sequenceSection"> @Model.SectionStatus(section.SequenceId, section.SectionId)</strong>

                                            }
                                        </li>

                                    }
                                }
                            </ul>
                        </li>
                    
                    await Html.RenderPartialAsync("~/Views/Roatp/TaskList/FinishSequence.cshtml", Model);
                }

            </ol>
        </div>
    </div>
</main>