@model SFA.DAS.ApplyService.Web.Controllers.QuestionViewModel

@if (!string.IsNullOrWhiteSpace(Model.Value))
{
    <table class="govuk-table">
        <thead class="govuk-table__head">
        <tr class="govuk-table__row">
            <th class="govuk-table__header" scope="col">Uploaded file</th>
            <th class="govuk-table__header" scope="col"></th>
        </tr>
        </thead>
        <tbody class="govuk-table__body">
        <tr class="govuk-table__row">
            <td class="govuk-table__cell govuk-table__cell--break-word" scope="row">
                <a href="@Url.Action("Download", "Application", new
                         {
                             applicationId = Model.ApplicationId,
                             sequenceId = Model.SequenceId,
                             sectionId = Model.SectionId,
                             pageId = Model.PageId,
                             questionId = Model.QuestionId,
                             filename = Model.Value
                         })">
                    @Model.Value
                </a>
            </td>
            <td class="govuk-table__cell govuk-table__cell--numeric">
                <a class="govuk-link" href="@Url.Action("DeleteFile", "Application", new
                                            {
                                                applicationId = Model.ApplicationId,
                                                sequenceId = Model.SequenceId,
                                                sectionId = Model.SectionId,
                                                pageId = Model.PageId,
                                                questionId = Model.QuestionId,
                                                redirectAction = Model.RedirectAction
                                            })">
                    Remove
                    <span class="govuk-visually-hidden"> file</span>
                </a>
            </td>
        </tr>
        </tbody>
    </table>
}
else
{
    if (Model.ErrorMessages != null && Model.ErrorMessages.Count > 0)
    {
        foreach (var errorMessage in Model.ErrorMessages)
        {
            if (errorMessage.Field == Model.QuestionId)
            {
                <span class="govuk-error-message">@errorMessage.ErrorMessage</span>
            }
        }
    }

    <input
        type="file"
        class="govuk-file-upload"
        id="@Model.QuestionId"
        name="@Model.QuestionId"
        accept=".pdf,application/pdf"/>

    <div class="js-file-upload">
        <div class="js-uploaded-container">
            <h2 class="govuk-heading-m">Uploaded files</h2>
            <table class="govuk-table">
                <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    <th class="govuk-table__header" scope="col">File name</th>
                    <th class="govuk-table__header" scope="col">
                        <span class="govuk-visually-hidden-focusable">Action</span>
                    </th>
                </tr>
                </thead>
                <tbody class="govuk-table__body js-uploaded-files">
                @foreach (var uploadedFile in Model.FileUploadInfo.Uploads)
                {
                    <tr class="govuk-table__row">
                        <th class="govuk-table__header" scope="row">@uploadedFile.Filename</th>
                        <td class="govuk-table__cell govuk-table__cell--numeric">
                            <a class="js-remove-file" href="#&quot;" data-uploadedFileId="@uploadedFile.Id">Remove</a>
                        </td>
                    </tr>
                }
                
                
                </tbody>
            </table>
            <ul class="govuk-list js-uploaded-files"></ul>
            
        </div>

        <div href="#" class="js-drop-target">
            <div class="js-upload-controls">
                <p class="govuk-body govuk-!-margin-bottom-1">Drag files here</p>
                <p class="govuk-body govuk-!-margin-bottom-0">or <a class="js-browse-button govuk-link" href="#">choose files to upload</a></p>
            </div>
            <div class="js-upload-progress"></div>
        </div>
    </div>
}

<script src="@Url.Content("~/javascripts/resumable.js")"></script>
<script type="text/javascript">
    var r = new Resumable({
        target: "/Upload/Chunks",
        chunkSize: 100000,
        query: { applicationId: "@Model.ApplicationId", sequenceId: @Model.SequenceId, sectionId: @Model.SectionId, page: @Model.PageId, questionId: "@Model.QuestionId" },
        maxFiles: @(Model.FileUploadInfo.NumberOfUploadsRequired == null ? "undefined" : Model.FileUploadInfo.NumberOfUploadsRequired.ToString())
    });

    var dropTarget = document.querySelector(".js-drop-target");
    r.assignBrowse(dropTarget);
    r.assignDrop(dropTarget);

    var uploadProgress = document.querySelector(".js-upload-progress");
    var uploadControls = document.querySelector(".js-upload-controls");
    var uploadedContainer = document.querySelector(".js-uploaded-container");
    var uploadedFiles = document.querySelector(".js-uploaded-files");

    var progressBar = new ProgressBar(uploadProgress);

    r.on("fileAdded",
        function(file, event) {
            r.upload();
            progressBar.fileAdded();
        });

    r.on("fileSuccess",
        function(file, message) {
            // console.debug("fileSuccess", file);

            progressBar.finish();
            // console.log(file.fileName);
            var fileNameListItem = document.createElement("tr");
            fileNameListItem.className = "govuk-table__row";
            fileNameListItem.innerHTML =
                '<th class="govuk-table__header" scope="row">' +
                file.fileName +
                '</th><td class="govuk-table__cell govuk-table__cell--numeric"><a class="js-remove-file" href=#">Remove</a></td>';
            uploadedFiles.appendChild(fileNameListItem);
            uploadedContainer.style.display = "block";

            // Remove file (from ui) when delete clicked
            var deleteButtons = document.querySelectorAll(".js-remove-file");
            deleteButtons.forEach(function(button) {
                button.addEventListener("click",
                    function(event) {
                        event.target.parentNode.parentNode.remove();
                        r.removeFile(file);
                    });
            });
        });

    r.on("fileProgress",
        function(file, message) {
            progressBar.uploading(file.progress() * 100);
        });

    r.on("complete",
        function() {
            // console.debug("complete");
            uploadProgress.style.display = "none";
            uploadControls.style.display = "block";
        });

    function ProgressBar(ele) {
        this.fileAdded = function() {
            // console.log("added");
            ele.style.display = "block";
            uploadControls.style.display = "none";
            ele.style.width = "0%";
        };

        this.uploading = function(progress) {
            console.log("uploading: " + Math.round(progress) + "%");
            ele.style.width = progress + "%";
        };

        this.finish = function() {
            // console.log("finished");
            ele.style.width = "100%";
        };
    }

//r.on('pause', function(){
//    $('#pause-upload-btn').find('.glyphicon').removeClass('glyphicon-pause').addClass('glyphicon-play');
//});
// r.on('fileProgress', function(file){
//     console.debug('fileProgress', file);
// });
// r.on('fileAdded', function(file, event){
//     r.upload();
//     console.debug('fileAdded', event);
// });
// r.on('filesAdded', function(array){
//     r.upload();
//     console.debug('filesAdded', array);
// });
// r.on('fileRetry', function(file){
//     console.debug('fileRetry', file);
// });
// r.on('fileError', function(file, message){
//     console.debug('fileError', file, message);
// });
// r.on("fileSuccess", function(file) {
//   console.debug("fileSuccess", file);
// });
// r.on('uploadStart', function(){
//     console.debug('uploadStart');
// });
// r.on("complete", function() {
//   console.debug("complete");
// });
// r.on('progress', function(){
//     console.debug('progress');
//     console.log(r.progress())
// });
// r.on("error", function(message, file) {
//   console.debug("error", message, file);
// });
// r.on('pause', function(){
//     console.debug('pause');
// });
// r.on('cancel', function(){
//     console.debug('cancel');
// });

</script>