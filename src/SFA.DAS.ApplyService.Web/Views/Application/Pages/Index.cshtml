@model SFA.DAS.ApplyService.Web.ViewModels.PageViewModel

@{
    ViewBag.Title = (!ViewData.ModelState.IsValid ? "Error: " : "") + (@Model.Title ?? "Page not active");

    var hasSectionTitle = !string.IsNullOrEmpty(Model.SectionTitle);
}

@{ await Html.RenderPartialAsync("~/Views/Roatp/ApplicationHeader.cshtml"); }

<div class="grid-row">
    <a class="govuk-back-link" href="@Url.Action("Back", "RoatpApplication", new { Model.ApplicationId, sequenceId = Model.SequenceId, sectionId = Model.SectionId, pageId = Model.PageId, redirectAction = "TaskList" })">Back</a>
</div>
<main class="govuk-main-wrapper " id="main-content" role="main">
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            @if (Model.Questions == null)
            {
                <h1 class="govuk-heading-xl">
                    Page not active
                </h1>
            }
            else
            {
                @if (!ViewData.ModelState.IsValid)
                {

                    <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="error-summary">
                        <h2 class="govuk-error-summary__title" id="error-summary-title">
                            There is a problem
                        </h2>
                        <div class="govuk-error-summary__body">
                            <ul class="govuk-list govuk-error-summary__list">
                                @foreach (var error in Model.ErrorMessages)
                                {
                                    <li>
                                        <a href="#@error.Field">@Html.Raw(error.ErrorMessage)</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @if (Model.Questions.Count() != 1)
                {
                    var hasModelTitle = !string.IsNullOrEmpty(Model.Title);
                    var hasBodyText = !string.IsNullOrEmpty(Model.BodyText);

                    if (hasSectionTitle)
                    {
                        <span class="govuk-caption-l">@Model.SectionTitle</span>
                    }

                    if ((hasModelTitle || hasBodyText) && Model.PageContext != null)
                    {
                        <span class="govuk-caption-l">
                            @Html.Raw(Model.PageContext)
                        </span>
                    }

                    @if (Model.DisplayType == "PagesWithSections" || Model.DisplayType=="OtherPagesInPagesWithSections")
                    {
                        <h1 class="govuk-heading-xl">
                            @Html.Raw(Model.BodyText)
                        </h1>
                    }
                    else
                    {
                        if (hasModelTitle)
                        {
                            <h1 class="govuk-heading-xl">
                                @Html.Raw(Model.Title)
                            </h1>
                        }

                        @if (hasBodyText)
                        {
                            @Html.Raw(Model.BodyText)
                        }
                    }
                }

                @if (Model.HasFeedback)
                {
                    <div class="govuk-inset-text">
                        <h2 class="govuk-heading-l">Feedback</h2>
                        @foreach (var fb in Model.Feedback)
                        {
                            <p class="govuk-body">@Html.Raw(fb.Message)</p>
                        }
                    </div>
                }

                @* no action is specified for the form, post back to the get url to preserve the page hierarchy parameters *@
                <form method="post" novalidate enctype="multipart/form-data" asp-action="SaveAnswers" asp-route-applicationId="@Model.ApplicationId"
                      asp-route-sectionId="@Model.SectionId" asp-route-sequenceId="@Model.SequenceId" asp-route-pageId="@Model.PageId">
                    <input type="hidden" id="ApplicationId" name="ApplicationId" value="@Model.ApplicationId" />
                    <input type="hidden" id="RedirectAction" name="RedirectAction" value="@Model.RedirectAction" />

                    @if (Model.Questions.Count() == 1)
                    {
                        foreach (var question in Model.Questions)
                        {
                            <div class="govuk-form-group @(!ViewData.ModelState.IsValid ? "govuk-form-group--error" : "")">
                                <fieldset class="govuk-fieldset">
                                    @if (question.Type == "Checkbox" || question.Type == "Radio" || question.Type == "ComplexRadio" || question.Type == "CheckboxList" || question.Type=="ComplexCheckBoxList")
                                    {
                                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                        @if (Model.PageContext != null)
                                        {
                                            <span class="govuk-caption-l">
                                                @Html.Raw(Model.PageContext)
                                            </span>
                                        }
                                        @if (hasSectionTitle)
                                        {
                                            <span class="govuk-caption-l">@Model.SectionTitle</span>
                                        }


                                        @if (Model.DisplayType == "PagesWithSections" || Model.DisplayType == "OtherPagesInPagesWithSections")
                                        {
                                            <h1 class="govuk-heading-xl">
                                                @Html.Raw(Model.BodyText)
                                            </h1>
                                           
                                        }
                                        else
                                        {
                                            <h1 class="govuk-fieldset__heading">
                                                @Html.Raw(question.Label)
                                            </h1>
                                        }
                                    </legend>
                                        if (!string.IsNullOrWhiteSpace(@Model.BodyText) && Model.DisplayType != "PagesWithSections" && Model.DisplayType != "OtherPagesInPagesWithSections")
                                        {
                                            @Html.Raw(Model.BodyText)
                                        }
                                        else
                                            {
                                                @if (Model.DisplayType == "PagesWithSections" || Model.DisplayType == "OtherPagesInPagesWithSections")
                                                {
                                                    <label class="govuk-label">
                                                        @Html.Raw(question.Label)
                                                    </label>
                                                }
                                            }
                                        }
                                        else
                                        {
                                        if (!string.IsNullOrWhiteSpace(@Model.BodyText))
                                        {
                                        <div>
                                            @Html.Raw(Model.BodyText)
                                        </div>
                                        }
                                        @if (Model.PageContext != null)
                                        {
                                            <span class="govuk-caption-l">
                                                @Html.Raw(Model.PageContext)
                                            </span>
                                        }
                                        @if (hasSectionTitle)
                                        {
                                            <span class="govuk-caption-l">@Model.SectionTitle</span>
                                        }
                                        <h2 class="govuk-label-wrapper">
                                            <label class="govuk-label govuk-label--l" for="@question.QuestionId">
                                                @Html.Raw(question.Label)
                                            </label>
                                        </h2>
                                        }

                                        @if (question.QuestionBodyText != null)
                                        {
                                            @Html.Raw(question.QuestionBodyText)
                                        }

                                        @if (question.Hint != null)
                                        {
                                            <span class="govuk-hint">
                                                @Html.Raw(question.Hint)
                                            </span>
                                        }

                                        @if ((question.Type == "ComplexRadio" || question.Type == "ComplexCheckBoxList") && (question.ErrorMessages == null || question.ErrorMessages.Count == 0))
                                        {
                                            question.ErrorMessages = Model.ErrorMessages;
                                        }
                                        @{
                                            var questionType = question.Type.Replace("DataFed_", "");

                                        }

                                        @(await Html.PartialAsync($"~/Views/QuestionPartials/_{questionType}.cshtml", question))
</fieldset>
                            </div>
                        }
                    }
                    else
                    {
                        foreach (var question in Model.Questions)
                        {
                            <div class="govuk-form-group @(question.ErrorMessages?.Any() ?? false ? "govuk-form-group--error" : "")">

                                @if (question.Type == "Address")
                                {
                                    <h2 class="govuk-heading-l">
                                        @Html.Raw(question.Label)
                                    </h2>
                                }
                                else
                                {
                                    <label class="govuk-label" for="@question.QuestionId">
                                        @Html.Raw(question.Label)
                                    </label>
                                }

                                @if (question.QuestionBodyText != null)
                                {
                                    @Html.Raw(question.QuestionBodyText)
                                }

                                @if (question.Hint != "")
                                {
                                    <span class="govuk-hint">
                                        @Html.Raw(question.Hint)
                                    </span>
                                }

                                @if ((question.Type == "ComplexRadio" || question.Type == "ComplexCheckBoxList") && (question.ErrorMessages == null || question.ErrorMessages.Count == 0))
                                {
                                    question.ErrorMessages = Model.ErrorMessages;
                                }

                                @(await Html.PartialAsync($"~/Views/QuestionPartials/_{question.Type}.cshtml", question))
                            </div>
                        }
                    }

                    @* only a single Question of type Address is supported per page *@
                    @if (Model.Questions?.Exists(p => p.Type == "Address") ?? false)
                    {
                        @section Scripts {
                            <script src="@Url.Content("~/javascripts/lib/jquery/jquery.min.js")"></script>
                            <script src="@Url.Content("~/javascripts/lib/jqueryui/jquery-ui.min.js")"></script>
                            <script src="@Url.Content("~/javascripts/gov-uk-postcode-lookup-service.min.js")"></script>
                        }
                    }
                    
                    @if (Model.InfoText != null)
                    {
                        @Html.Raw(Model.InfoText)
                    }

                    @if (!Model.HideCTA)
                    {
                        <button type="submit" class="govuk-button">@Model.CTAButtonText</button>
                    }

                    @foreach (var linksConfiguration in Model.LinksConfiguration)
                    {
                        var pageId = Model.PageId;
                        var first = true;
                        @foreach (var link in linksConfiguration.Links)
                        {

                            if (!string.IsNullOrEmpty(link.LinkPageId))
                            {
                                pageId = link.LinkPageId;
                            }

                            if (first && Model.SectionId != 1)
                            {
                                <p class="govuk-body skipbutton" id="skipbutton">
                                    <a class="govuk-link" href="@Url.Action(link.Action, link.Controller, new {Model.ApplicationId, sequenceId = Model.SequenceId, sectionId = Model.SectionId, pageId = pageId})">@link.Caption</a>
                                </p>
                            }
                            else
                            {
                                first = false;


                                <p class="govuk-body govuk-!-margin-bottom-2">
                                    <a class="govuk-link" href="@Url.Action(link.Action, link.Controller, new {Model.ApplicationId, sequenceId = Model.SequenceId, sectionId = Model.SectionId, pageId = pageId})">@link.Caption</a>
                                </p>
                            }
                        }
                    }

                    <partial name="~/Views/Application/Pages/PeopleInControlComponent.cshtml" for="PeopleInControlDetails" />
                    <partial name="~/Views/Application/Pages/DetailsComponent.cshtml" for="Details" />
                </form>
            }

        </div>
    </div>
</main>

<partial name="~/Views/Roatp/GetHelpWithThisQuestion.cshtml" />
